package ${table.controllerPackageName};

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.louis.kitty.core.http.HttpResult;
import com.louis.kitty.core.page.PageRequest;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import ${table.modelPackageName}.${table.className};
import ${table.servicePackageName}.${table.className}Service;

/**
 * ---------------------------
 * ${table.description} (${table.className}Controller)         
 * ---------------------------
 * 作者：  ${table.author}
 * 时间：  ${strutil.formatDate(date(),'yyyy-MM-dd HH:mm:ss')}
 * 版本：  v1.0
 * ---------------------------
 */
@Api(value = "${table.className}Controller", description = "${table.description}相关接口")
@RestController
@RequestMapping("/v1")
public class ${table.className}Controller {

	@Autowired
	private ${table.className}Service ${table.objectName}Service;

   /**
     * 保存${table.description}
     * @param record
     * @return
     */
    @ApiOperation(value = "保存${table.description}", notes = "保存${table.description}接口")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "record", value = "${table.description}对象", required = true, dataType = "${table.className}", paramType = "body")
    })
    @PostMapping("/${table.objectName}")
    public Result save(@Valid @RequestBody ${table.className}SaveOrUpdateVO record) {
        ${table.objectName}Service.save(record);
        return Result.SUCCESS();
    }

   /**
     * 修改${table.description}
     * @param id
     * @param record
     * @return
     */
    @ApiOperation(value = "修改${table.description}", notes = "修改${table.description}接口")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "${table.description}ID", required = true, dataType = "String", paramType = "path"),
            @ApiImplicitParam(name = "record", value = "${table.description}对象", required = true, dataType = "${table.className}", paramType = "body")
    })
    @PutMapping("/${table.objectName}/{id}")
    public Result update(@Valid @PathVariable(value = "id") String id, @RequestBody ${table.className}SaveOrUpdateVO record) {
        ${table.objectName}Service.update(id, record);
        return Result.SUCCESS();
    }

    /**
     * 删除${table.description}
     * @param id
     * @return
     */
	@ApiOperation(value = "修改${table.description}", notes = "修改${table.description}接口")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "${table.description}ID", required = true, dataType = "String", paramType = "path")
    })
    @DeleteMapping("/${table.objectName}/{id}")
    public Result delete(@Valid @PathVariable(value = "id") String id) {
        ${table.objectName}Service.delete(id);
        return Result.SUCCESS();
    }

    /**
     * 根据主键查询
     * @param ${table.primaryKey.fieldName}
     * @return
     */
    @GetMapping("/${table.objectName}")
    public Result<${table.className}VO> findById(@Valid @PathVariable(value = "id") String id) {
        ${table.className}VO queryResult = ${table.objectName}Service.findById(id);
        return Result.SUCCESS(queryResult);
    }


    /**
     * ${table.description}分页模糊查询
     * @param page
     * @param size
     * @return
     */
    @ApiOperation(value = "外部数据源分页列表查询", notes = "外部数据源分页列表查询接口")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "page", value = "当前页码", required = true, dataType = "int", paramType = "query"),
            @ApiImplicitParam(name = "size", value = "分页尺寸", required = true, dataType = "int", paramType = "query")
    })
    @GetMapping("/${table.objectName}s/page")
    public Result<QueryResult<${table.className}VO>> listByPageAndParam(${table.className}QueryConditionVO queryConditionVO,
                                     @RequestParam("page") Integer page,
                                     @RequestParam("size") Integer size) {
        QueryResult<${table.className}VO> queryResult = labelService.listByPageAndParam(queryConditionVO, page, size);
        return Result.SUCCESS(queryResult);
    }
	
}
